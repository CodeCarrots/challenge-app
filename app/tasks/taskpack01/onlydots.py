import random

from ..task import Task


class OnlyDotsTask(Task):
    '''
    Zmienna `dotList` zawiera listę krotek, które zawierają
    współrzędne punktów czyli nasze "kropki".

    Przy pomocy biblioteki `turtle` napisz program, który połączy
    kropki. Jeżeli wykonasz zadanie dobrze - powstanie rysunek. Nazwa
    obiektu na rysunku będzie rozwiązaniem zadania.

    (W pliku zadania znajdziesz wskazówki które pomogą Ci poradzić
    sobie z biblioteką `turtle`.)

    Powodzenia!
    '''

    title = 'Połącz kropki'

    variable_name = 'dotList'

    template = '''\
    #################
    # POLACZ KROPKI #
    #################

    # importujemy biblioteke turtle
    import turtle

    # a tak tworzymy obiekt zolwia, ktorym bedziemy rysowac
    t = turtle.Turtle()

    # to jest wspomniana w opisie zadania lista punktow
    {var_eq_data}

    # Teraz czas na Ciebie!
    # Napisz petle, ktora bedzie przesuwac zolwia po kolei od punktu do punktu
    # z listy dotList.

    # PETLA TUTAJ

    # Przyda Ci sie zapewne polecenie przesuwajce zolwia do punktu
    # o wspolrzednych x i y:
    #   t.goto(x,y)
    # Jezeli point jest zmienna zawierajaca krotke ze wspolrzednymi, czyli
    #   point = (x,y)
    # to mozesz napisac:
    #   t.goto(point)

    # A to jest tylko polecenie powodujace, ze okienko z rysunkiem nie
    # zniknie zaraz po zakonczeniu rysowania. Zakomentuj ponizsza linijke,
    # zeby zobaczyc roznice.

    turtle.mainloop()
    '''

    data = [
        ([(0,200), (-50, 160), (-10, 160), (-60, 120), (-10, 120),
          (-70, 80), (-10,80), (-80, 40), (-10, 40), (-10, 0), (10, 0),
          (10, 40), (80, 40), (10, 80), (70,80), (10,120), (60,120),
          (10, 160), (50, 160), (0, 200)],
         ['choinka']),
        ([(-6, 134), (-5, 7), (-2, 131), (-4, 6), (-2, 136), (-26, 178),
          (-1, 136), (12, 179), (-2, 137), (55, 163), (114, 178),
          (130, 144), (136, 113), (118, 85), (79, 87), (25, 89), (-2, 92),
          (117, 84), (135, 61), (136, 27), (123, -3), (83, -10), (39, -2),
          (16, 21), (-7, 34), (-31, 15), (-50, -1), (-93, -8), (-140, 8),
          (-140, 39), (-132, 68), (-123, 86), (-6, 94), (-119, 90),
          (-146, 123), (-138, 163), (-79, 156), (-39, 147), (-2, 135)],
         ['motyl']),
        ([(49, 2), (80, 26), (103, 71), (105, 129), (71, 173), (-3, 185),
          (-79, 179), (-122, 139), (-137, 103), (-120, 54), (-91, 22),
          (-56, 1), (-4, -2), (50, 1), (82, 25), (102, 69), (107, 130),
          (146, 195), (73, 176), (54, 175), (145, 194), (35, 182), (-7, 185),
          (-76, 179), (-151, 200), (-124, 137), (-151, 200), (-50, 183),
          (-78, 179), (-123, 138), (-136, 102), (-32, 95), (14, 97),
          (-13, 61), (-33, 94), (-128, 80), (-34, 93), (-120, 51), (-33, 95),
          (16, 96), (105, 101), (15, 96), (103, 83), (14, 96), (98, 61),
          (15, 95), (-13, 61), (-10, 24), (-37, 27), (-9, 23), (20, 26),
          (-9, 23), (-13, 60), (-33, 94), (-87, 133), (-22, 139), (-33, 94),
          (12, 96), (-7, 138), (47, 135), (13, 97), (16, 133), (21, 133),
          (14, 100), (-31, 95), (-54, 133), (-44, 135), (-31, 98)],
         ['kot']),
        ([(-4, -97), (48, -97), (90, -81), (135, -43), (130, 39), (97, 122),
          (27, 153), (-56, 157), (-117, 142), (-137, 98), (-154, 54),
          (-155, -8), (-137, -28), (-96, -65), (-63, -79), (-27, -97),
          (-5, -100), (26, -198), (49, -97), (109, -170), (89, -85),
          (175, -120), (126, -53), (229, -46), (134, -4), (223, 30),
          (125, 53), (210, 125), (105, 114), (145, 200), (58, 145),
          (66, 215), (14, 158), (-16, 216), (-35, 159), (-72, 217),
          (-76, 159), (-115, 211), (-119, 144), (-170, 208), (-139, 96),
          (-224, 145), (-157, 55), (-234, 39), (-157, 14), (-228, -18),
          (-139, -28), (-184, -108), (-109, -59), (-136, -148), (-73, -79),
          (-77, -197), (-5, -103)],
         ['slonce', 'słońce']),
        ([(26, 2), (53, 10), (62, 34), (59, 57), (20, 68), (-18, 63),
          (-35, 32), (-45, -6), (-25, -31), (17, -36), (47, -35), (77, -16),
          (86, 6), (91, 41), (81, 72), (36, 106), (-19, 101), (-54, 72),
          (-73, 37), (-87, -5), (-91, -30), (-27, -33), (-88, -32),
          (-111, -13), (-127, 13), (-162, 12), (-176, 51), (-161, 11),
          (-145, 52), (-161, 11), (-169, 1), (-167, -7), (-149, -27),
          (-138, -39), (-115, -49), (-95, -50), (-60, -52), (25, -53),
          (70, -56), (119, -54), (49, -35)],
         ['slimak', 'ślimak']),
        ([(73, 1), (92, 18), (107, 17), (124, 6), (126, -17), (103, -25),
          (84, -20), (74, 0), (94, 17), (109, 15), (125, 5), (126, -1),
          (167, -3), (164, 10), (128, 15), (123, 6), (130, 15), (164, 10),
          (151, 78), (117, 111), (49, 128), (-4, 118), (-59, 89), (-67, 68),
          (-109, 59), (-137, 54), (-148, 36), (-142, 18), (-139, 3),
          (-137, -7), (-65, -8), (-54, -7), (-51, 0), (-42, 14), (-27, 13),
          (-11, 10), (-4, -1), (-10, -16), (-30, -32), (-48, -22), (-55, -8),
          (-137, -8), (-138, 10), (-47, 3), (-55, -9), (-40, 13), (-8, 9),
          (-11, 61), (-64, 67), (-11, 60), (81, 65), (89, 16), (83, 65),
          (152, 75)],
         ['samochod', 'samochód']),
        ([(112, 1), (45, 108), (-6, -2), (-155, 29), (-107, 124), (45, 106),
          (-4, -1), (-6, -109), (112, -110), (111, -2), (-5, -1), (-154, 27),
          (-155, -75), (-5, -109), (32, -108), (26, -27), (80, -26),
          (80, -110), (-7, -109), (-4, -60), (-154, -36), (-125, -40),
          (-129, -2), (-98, -5), (-99, -44), (-69, -47), (-69, -13),
          (-30, -15), (-39, -53), (-33, -61)],
         ['dom']),
    ]

    def generate_data(self):
        r = random.Random()
        r.seed(self.seed)
        selected = r.choice(self.data)
        return selected[0]

    def solutions(self):
        r = random.Random()
        r.seed(self.seed)
        selected = r.choice(self.data)
        return selected[1]
